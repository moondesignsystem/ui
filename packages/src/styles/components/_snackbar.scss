@use "sass:map";
@use "variables";
@use "variants";
@use "alert";
@use "button";

@function generate-variant($variant) {
  @return (
    "color": var(--component-snackbar-#{$variant}-text),
    "background": var(--component-snackbar-#{$variant}-background),
    "shadow": inset 0 0 0 var(--component-snackbar-#{$variant}-stroke) var(--component-snackbar-#{$variant}-border),
    "icon": var(--component-snackbar-#{$variant}-icon),
    "width": var(--component-snackbar-#{$variant}-max-width)
  );
}
$variants: ();
@each $variant in variants.$snackbar-variants {
  $variants: map.set($variants, $variant, generate-variant($variant));
}

.moon-snackbar {
  @extend .moon-alert;

  max-width: map.get($variants, "fill", "width");
  display: grid;
  grid-template-columns: auto minmax(auto, 1fr);
  grid-auto-flow: column;
  justify-content: start;
  justify-items: start;
  font-weight: var(--style-font-weight-medium);
  color: map.get($variants, "fill", "color");
  background-color: map.get($variants, "fill", "background");
  box-shadow: variables.$shadow-500, map.get($variants, "fill", "shadow");

  :where(.moon-snackbar-action) {
    @extend .moon-button;
    @extend .moon-button-sm;
    @extend .moon-button-ghost;

    justify-self: end;
    color: map.get($variants, "fill", "color");

    :where(svg, .moon-icon) {
      color: map.get($variants, "fill", "icon");
    }
  }

  @each $variant, $prop in $variants {
    @if $variant != "fill" {
      &.moon-snackbar-#{$variant} {
        max-width: map.get($prop, "width");
        color: map.get($prop, "color");
        background-color: map.get($prop, "background");
        box-shadow: variables.$shadow-500, map.get($prop, "shadow");

        :where(svg, .moon-icon) {
          color: map.get($prop, "icon");
        }

        :where(.moon-snackbar-action) {
          color: map.get($prop, "color");

          :where(svg, .moon-icon) {
            color: map.get($prop, "icon");
          }
        }
      }
    }
  }
}
