@use "sass:map";
@use "variants";
@use "utilities";

@mixin list-sizes($size, $prop) {
  & > .moon-list-item {
    height: map.get($prop, "height");
    font: map.get($prop, "font");
    gap: map.get($prop, "gap");
    padding: map.get($prop, "padding");

    :where(svg, .moon-icon) {
      width: map.get($prop, "icon-size");
      height: map.get($prop, "icon-size");
    }

    :where(.moon-list-meta) {
      gap: map.get($sizes, "md", "gap");
    }
  }
}

$sizes: ();
@each $size in variants.$list-sizes {
  $sizes: map.set(
    $sizes,
    $size,
    (
      "height": var(--spacing-space-#{utilities.get-size($size, "height")}),
      "gap": var(--spacing-space-#{utilities.get-size($size, "gap")}),
      "padding": var(--spacing-space-#{utilities.get-size($size, "padding")}),
      "icon-size": var(--spacing-space-#{utilities.get-size($size, "icon-size")}),
      "font": var(--font-weight-medium)
        var(--style-text-#{utilities.get-size($size, "font")}-font-size) /
        var(--style-text-#{utilities.get-size($size, "font")}-line-height)
        var(--font-default)
    )
  );
}

.moon-list {
  display: flex;
  width: 100%;
  flex-direction: column;

  & > .moon-list-item {
    position: relative;
    display: flex;
    align-items: center;
    gap: map.get($sizes, "md", "gap");
    padding: map.get($sizes, "md", "padding");
    height: map.get($sizes, "md", "height");
    font: map.get($sizes, "md", "font");
    color: var(--component-list-text-default);

    &:not(:last-child)::after {
      content: "";
      position: absolute;
      bottom: 0;
      inset-inline: 0;
      height: var(--spacing-stroke-1);
      background-color: var(--color-border-secondary);
    }

    :where(svg, .moon-icon) {
      width: map.get($sizes, "md", "icon-size");
      height: map.get($sizes, "md", "icon-size");
      color: var(--color-icon-primary);
    }

    :where(.moon-list-item-meta) {
      margin-inline-start: auto;
      display: flex;
      align-items: center;
      gap: map.get($sizes, "md", "gap");
      color: var(--color-text-secondary);
    }

    :where(:last-child) {
      justify-self: end;
    }
  }

  @each $size, $prop in $sizes {
    @if $size != "md" {
      &.moon-list-#{$size} {
        @include list-sizes($size, $prop);
      }
    }
  }
}
