@use "sass:map";
@use "variables";
@use "variants";

@mixin list-sizes($size, $prop) {
  & > * {
    height: map.get($prop, "height");
    font: map.get($prop, "font");
    gap: map.get($prop, "gap");
    padding: map.get($prop, "padding");

    :where(svg) {
      width: map.get($prop, "icon-size");
      height: map.get($prop, "icon-size");
    }
  }
}

@function generate-size($size) {
  @return (
    "height": var(--scale-#{$size}-height),
    "gap": var(--scale-#{$size}-gap),
    "padding": var(--list-padding-#{$size}),
    "icon-size": var(--scale-#{$size}-icon-size),
    "font": var(--scale-#{$size}-text-weight) var(--scale-#{$size}-text-size) / var(--scale-#{$size}-text-height)
      var(--scale-#{$size}-text-font)
  );
}
$sizes: ();
@each $size in variants.$list-sizes {
  $sizes: map.set($sizes, $size, generate-size($size));
}

.moon-list {
  display: flex;
  width: 100%;
  flex-direction: column;

  & > * {
    position: relative;
    display: grid;
    grid-template-columns: auto minmax(auto, 1fr);
    grid-auto-flow: column;
    justify-content: start;
    place-items: center start;
    gap: map.get($sizes, "md", "gap");
    padding: map.get($sizes, "md", "padding");
    height: map.get($sizes, "md", "height");
    font: map.get($sizes, "md", "font");
    color: var(--semantic-text-primary);

    &:not(:last-child)::after {
      content: "";
      position: absolute;
      bottom: 0;
      inset-inline: 0;
      height: var(--dimension-border-1);
      background-color: var(--semantic-border-secondary);
    }

    :where(svg) {
      width: map.get($sizes, "md", "icon-size");
      height: map.get($sizes, "md", "icon-size");
      color: var(--semantic-icon-primary);
    }

    :where(:last-child) {
      justify-self: end;
    }
  }

  @each $size, $prop in $sizes {
    @if $size != "md" {
      &.moon-list-#{$size} {
        @include list-sizes($size, $prop);
      }
    }
  }
}
