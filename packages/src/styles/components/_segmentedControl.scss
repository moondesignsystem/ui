@use "sass:map";
@use "sass:list";
@use "variables";
@use "variants";
@use "utilities";

$item-radius: (
  "sm": "xs",
  "md": "sm",
  "lg": "md"
);

$sizes: ();
@each $size in variants.$segmented-control-sizes {
  $sizes: map.set(
    $sizes,
    $size,
    (
      "track-radius": var(--component-segmented-control-track-radius-#{$size}),
      "height": var(--spacing-space-#{utilities.get-size($size, "height")}),
      "width": var(--spacing-space-#{utilities.get-size($size, "width")}),
      "padding": 0 var(--spacing-space-#{utilities.get-size($size, "padding")}),
      "gap": var(--spacing-space-#{utilities.get-size($size, "gap")}),
      "radius": var(--component-segmented-control-segment-radius-#{map.get($item-radius, $size)}),
      "font": var(--font-weight-medium)
        var(--style-text-#{utilities.get-size($size, "font")}-font-size) /
        var(--style-text-#{utilities.get-size($size, "font")}-line-height)
        var(--font-default),
      "icon-size": var(--spacing-space-#{utilities.get-size($size, "icon-size")})
    )
  );
}

.moon-segmented-control {
  display: flex;
  width: 100%;
  height: map.get($sizes, "md", "height");
  justify-content: stretch;
  border-radius: map.get($sizes, "md", "track-radius");
  background-color: var(--component-segmented-control-track-background);
  padding: var(--spacing-space-4);
  gap: var(--spacing-space-4);
  box-shadow: inset 0 0 0 var(--component-segmented-control-track-stroke)
    var(--component-segmented-control-track-border);

  :where(.moon-segmented-control-item) {
    position: relative;
    width: 100%;
    overflow: hidden;
    display: inline-flex;
    height: 100%;
    min-width: map.get($sizes, "md", "width");
    cursor: pointer;
    user-select: none;
    appearance: none;
    white-space: nowrap;
    align-items: center;
    justify-content: center;
    text-align: center;
    color: var(--component-segmented-control-segment-text-default);
    background-color: var(--component-segmented-control-segment-background-default);
    padding: map.get($sizes, "md", "padding");
    gap: map.get($sizes, "md", "gap");
    border-radius: map.get($sizes, "md", "radius");
    font: map.get($sizes, "md", "font");
    box-shadow: inset 0 0 0 var(--component-segmented-control-segment-stroke-default)
      var(--component-segmented-control-segment-border-default);
    transition:
      background-color 150ms ease-in-out,
      color 150ms ease-in-out,
      box-shadow 150ms ease-in-out;

    :where(svg, .moon-icon) {
      width: map.get($sizes, "md", "icon-size");
      height: map.get($sizes, "md", "icon-size");
      color: var(--component-segmented-control-segment-icon-default);
      flex-shrink: 0;
    }

    &.moon-segmented-control-item-active {
      background-color: var(--component-segmented-control-segment-background-active);
      color: var(--component-segmented-control-segment-text-active);
      box-shadow: inset 0 0 0 var(--component-segmented-control-segment-stroke-active)
        var(--component-segmented-control-segment-border-active);

      :where(svg, .moon-icon) {
        color: var(--component-segmented-control-segment-icon-active);
      }
    }
    &[disabled] {
      cursor: not-allowed;
      opacity: var(--style-opacity-disabled);
    }

    &::after {
      content: "";
      position: absolute;
      display: block;
      inset: 0;
      transition: background-color 150ms ease-in-out;
      pointer-events: none;
      background-color: var(--color-background-transparent);
    }

    &:not([disabled]):hover::after {
      background-color: var(--color-background-hover);
    }
  }
  @each $size, $prop in $sizes {
    @if $size != "md" {
      &.moon-segmented-control-#{$size} {
        height: map.get($prop, "height");
        border-radius: map.get($prop, "track-radius");

        :where(.moon-segmented-control-item) {
          min-width: map.get($prop, "width");
          padding: map.get($prop, "padding");
          gap: map.get($prop, "gap");
          border-radius: map.get($prop, "radius");
          font: map.get($prop, "font");

          :where(svg, .moon-icon) {
            width: map.get($prop, "icon-size");
            height: map.get($prop, "icon-size");
          }
        }
      }
    }
  }
}
