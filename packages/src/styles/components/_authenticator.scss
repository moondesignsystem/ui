@use "sass:map";
@use "variables";
@use "variants";
@use "utilities";

$sizes: ();
@each $size in variants.$authenticator-sizes {
  $sizes: map.set(
    $sizes,
    $size,
    (
      "gap": var(--sizing-gap-#{utilities.get-size($size, "gap")}),
      "width": var(--sizing-width-#{utilities.get-size($size, "width")}),
      "height": var(--sizing-height-#{utilities.get-size($size, "height")}),
      "radius": var(--component-forms-radius-#{$size}),
      "font": var(--style-font-weight-medium)
        var(--style-text-#{utilities.get-size($size, "font")}-font-size) /
        var(--style-text-#{utilities.get-size($size, "font")}-line-height)
        var(--style-font-family-default)
    )
  );
}

$variants: ();
@each $variant in variants.$authenticator-variants {
  $variants: map.set(
    $variants,
    $variant,
    (
      "shadow": inset
        0
        0
        0
        var(--component-authenticator-#{$variant}-stroke)
        var(--component-authenticator-#{$variant}-border),
      "color": var(--component-authenticator-#{$variant}-text-default),
      "placeholder": var(--component-authenticator-#{$variant}-text-placeholder),
      "background": var(--component-authenticator-#{$variant}-background)
    )
  );
}

.moon-authenticator {
  display: inline-flex;
  gap: map.get($sizes, "md", "gap");

  :where(input) {
    display: flex;
    width: 100%;
    max-width: map.get($sizes, "md", "width");
    height: map.get($sizes, "md", "height");
    outline: none;
    border-color: transparent;
    align-items: center;
    box-shadow: map.get($variants, "fill", "shadow");
    color: map.get($variants, "fill", "color");
    background-color: map.get($variants, "fill", "background");
    border-radius: map.get($sizes, "md", "radius");
    text-align: center;
    font: map.get($sizes, "md", "font");
    transition:
      box-shadow 150ms ease-in-out,
      opacity 150ms ease-in-out,
      background-color 150ms ease-in-out;

    &::placeholder {
      color: map.get($variants, "fill", "placeholder");
    }

    &:read-only,
    &:disabled {
      cursor: not-allowed;
    }

    &:disabled {
      opacity: var(--style-opacity-disabled);
    }

    &:not(:read-only, :disabled):hover {
      box-shadow: inset 0 0 0 var(--component-authenticator-outline-stroke)
        var(--component-authenticator-outline-border);
      background-color: var(--color-background-hover);
    }

    &:not(:read-only, :disabled):focus {
      box-shadow: inset 0 0 0 var(--spacing-space-2) var(--color-border-info);
    }
  }

  &.moon-authenticator-error {
    :where(input) {
      box-shadow: inset 0 0 0 var(--spacing-space-2) var(--color-border-negative);

      &:hover,
      &:focus {
        box-shadow: inset 0 0 0 var(--spacing-space-2) var(--color-border-negative);
      }
    }
  }

  @each $size, $prop in $sizes {
    @if $size != "md" {
      &.moon-authenticator-#{$size} {
        gap: map.get($prop, "gap");

        :where(input) {
          max-width: map.get($prop, "width");
          height: map.get($prop, "height");
          border-radius: map.get($prop, "radius");
          font: map.get($prop, "font");
        }
      }
    }
  }

  @each $variant, $prop in $variants {
    @if $variant != "fill" {
      &.moon-authenticator-#{$variant} {
        :where(input) {
          box-shadow: map.get($prop, "shadow");
          color: map.get($prop, "color");
          background-color: map.get($prop, "background");

          &::placeholder {
            color: map.get($prop, "placeholder");
          }
        }
      }
    }
  }
}
