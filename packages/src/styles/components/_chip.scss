@use "sass:map";
@use "variables";
@use "variants";

@function generate-variant($variant) {
  @return (
    "unselected-color": var(--chip-#{$variant}-unselected-text),
    "unselected-background": var(--chip-#{$variant}-unselected-background),
    "unselected-icon": var(--chip-#{$variant}-unselected-icon),
    "unselected-shadow": inset 0 0 0 var(--chip-#{$variant}-unselected-stroke) var(--chip-#{$variant}-unselected-border),
    "selected-color": var(--chip-#{$variant}-selected-text),
    "selected-background": var(--chip-#{$variant}-selected-background),
    "selected-icon": var(--chip-#{$variant}-selected-icon),
    "selected-shadow": inset 0 0 0 var(--chip-#{$variant}-selected-stroke) var(--chip-#{$variant}-selected-border)
  );
}
$variants: ();
@each $variant in variants.$chip-variants {
  $variants: map.set($variants, $variant, generate-variant($variant));
}
@function generate-size($size) {
  @return (
    "height": var(--scale-#{$size}-height),
    "padding": 0 var(--scale-#{$size}-padding),
    "gap": var(--scale-#{$size}-gap),
    "radius": var(--utility-chip-radius-#{$size}),
    "font": var(--scale-#{$size}-text-weight) var(--scale-#{$size}-text-size) / var(--scale-#{$size}-text-height)
      var(--scale-#{$size}-text-font),
    "icon-size": var(--scale-#{$size}-icon-size)
  );
}
$sizes: ();
@each $size in variants.$chip-sizes {
  $sizes: map.set($sizes, $size, generate-size($size));
}

.moon-chip {
  position: relative;
  display: inline-flex;
  align-items: center;
  cursor: pointer;
  overflow: hidden;
  transition: box-shadow 150ms ease-in-out;
  height: map.get($sizes, "md", "height");
  padding: map.get($sizes, "md", "padding");
  column-gap: map.get($sizes, "md", "gap");
  color: map.get($variants, "fill", "unselected-color");
  font: map.get($sizes, "md", "font");
  border-radius: map.get($sizes, "md", "radius");
  box-shadow: map.get($variants, "fill", "unselected-shadow");
  background-color: map.get($variants, "fill", "unselected-background");

  &::after {
    content: "";
    position: absolute;
    display: block;
    inset: 0;
    transition: background-color 150ms ease-in-out;
    pointer-events: none;
    background-color: var(--semantic-background-transparent);
  }

  &:hover {
    box-shadow: inset 0 0 0 var(--spacing-space-2) var(--semantic-border-active);

    &::after {
      background-color: var(--semantic-background-hover);
    }
  }

  :where(svg, .moon-icon) {
    color: map.get($variants, "fill", "unselected-icon");
    width: map.get($sizes, "md", "icon-size");
    height: map.get($sizes, "md", "icon-size");
  }

  &:where(.moon-chip-selected) {
    color: map.get($variants, "fill", "selected-color");
    background-color: map.get($variants, "fill", "selected-background");
    box-shadow: map.get($variants, "fill", "selected-shadow");

    :where(svg, .moon-icon) {
      color: map.get($variants, "fill", "selected-icon");
    }
  }

  @each $size, $prop in $sizes {
    @if $size != "md" {
      &.moon-chip-#{$size} {
        height: map.get($prop, "height");
        padding: map.get($prop, "padding");
        column-gap: map.get($prop, "gap");
        border-radius: map.get($prop, "radius");
        font: map.get($prop, "font");

        :where(svg, .moon-icon) {
          width: map.get($prop, "icon-size");
          height: map.get($prop, "icon-size");
        }
      }
    }
  }

  @each $variant, $prop in $variants {
    @if $variant != "fill" {
      &.moon-chip-#{$variant} {
        color: map.get($prop, "unselected-color");
        background-color: map.get($prop, "unselected-background");
        box-shadow: map.get($prop, "unselected-shadow");

        :where(svg, .moon-icon) {
          color: map.get($prop, "unselected-icon");
        }

        &:where(.moon-chip-selected) {
          color: map.get($prop, "selected-color");
          background-color: map.get($prop, "selected-background");
          box-shadow: map.get($prop, "selected-shadow");

          :where(svg, .moon-icon) {
            color: map.get($prop, "selected-icon");
          }
        }
      }
    }
  }
}
