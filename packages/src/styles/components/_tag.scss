@use "sass:map";
@use "variables";
@use "variants";
@use "utilities";

$variants: ();
@each $variant in variants.$tag-variants {
  $variants: map.set(
    $variants,
    $variant,
    (
      "shadow": inset 0 0 0 var(--component-tag-#{$variant}-stroke) var(--component-tag-#{$variant}-border),
      "background": var(--component-tag-#{$variant}-background),
      "color": var(--component-tag-#{$variant}-text),
      "icon-color": var(--component-tag-#{$variant}-icon)
    )
  );
}

$sizes: ();
@each $size in variants.$tag-sizes {
  $sizes: map.set(
    $sizes,
    $size,
    (
      "height": var(--sizing-height-#{utilities.get-size($size, "height")}),
      "padding": 0 var(--sizing-padding-#{utilities.get-size($size, "padding")}),
      "radius": var(--component-tag-radius-#{$size}),
      "gap": var(--sizing-gap-#{utilities.get-size($size, "gap")}),
      "font": var(--font-weight-medium)
        var(--style-text-#{utilities.get-size($size, "font")}-font-size) /
        var(--style-text-#{utilities.get-size($size, "font")}-line-height)
        var(--font-default),
      "icon-size": var(--sizing-height-#{utilities.get-size($size, "icon-size")})
    )
  );
}

.moon-tag {
  display: inline-flex;
  align-items: center;
  height: map.get($sizes, "xs", "height");
  padding: map.get($sizes, "xs", "padding");
  border-radius: map.get($sizes, "xs", "radius");
  gap: map.get($sizes, "xs", "gap");
  font: map.get($sizes, "xs", "font");
  box-shadow: map.get($variants, "fill", "shadow");
  background-color: map.get($variants, "fill", "background");
  color: map.get($variants, "fill", "color");

  :where(svg, .moon-icon) {
    width: map.get($sizes, "xs", "icon-size");
    height: map.get($sizes, "xs", "icon-size");
    color: map.get($variants, "fill", "icon-color");
  }

  @each $size, $prop in $sizes {
    @if $size != "xs" {
      &.moon-tag-#{$size} {
        height: map.get($prop, "height");
        padding: map.get($prop, "padding");
        border-radius: map.get($prop, "radius");
        gap: map.get($prop, "gap");
        font: map.get($prop, "font");

        :where(svg, .moon-icon) {
          width: map.get($prop, "icon-size");
          height: map.get($prop, "icon-size");
        }
      }
    }
  }

  @each $variant, $prop in $variants {
    @if $variant != "fill" {
      &.moon-tag-#{$variant} {
        box-shadow: map.get($prop, "shadow");
        background-color: map.get($prop, "background");
        color: map.get($prop, "color");

        :where(svg, .moon-icon) {
          color: map.get($prop, "icon-color");
        }
      }
    }
  }
}

@each $context in variants.$contexts {
  .moon-tag-#{$context} {
    @each $variant in variants.$tag-variants {
      --component-tag-#{$variant}-text: var(--context-#{$context}-#{$variant}-text);
      --component-tag-#{$variant}-icon: var(--context-#{$context}-#{$variant}-icon);
      --component-tag-#{$variant}-background: var(--context-#{$context}-#{$variant}-background);
      --component-tag-#{$variant}-border: var(--context-#{$context}-#{$variant}-border);
    }
  }
}
