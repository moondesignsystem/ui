@use "sass:map";
@use "variables";
@use "variants";
@use "utilities";

$sizes: ();
@each $size in variants.$accordion-sizes {
  $sizes: map.set(
    $sizes,
    $size,
    (
      "gap": var(--sizing-gap-#{utilities.get-size($size, "gap")}),
      "radius": var(--component-accordion-radius-#{$size}),
      "padding": var(--sizing-padding-#{utilities.get-size($size, "padding")}),
      "padding-end": calc(var(--spacing-space-20) * 2),
      "height": var(--sizing-height-#{utilities.get-size($size, "height")}),
      "font": var(--font-weight-medium)
        var(--style-text-#{utilities.get-size($size, "font")}-font-size) /
        var(--style-text-#{utilities.get-size($size, "font")}-line-height)
        var(--font-default)
    )
  );
}

$variants: ();
@each $variant in variants.$accordion-variants {
  $variants: map.set(
    $variants,
    $variant,
    (
      "color": var(--component-accordion-#{$variant}-title),
      "background": var(--component-accordion-#{$variant}-background),
      "border": var(--component-accordion-#{$variant}-border),
      "icon": var(--component-accordion-#{$variant}-icon),
      "shadow": inset 0 0 0 var(--component-accordion-#{$variant}-stroke) var(--component-accordion-#{$variant}-border)
    )
  );
}

.moon-accordion {
  align-items: stretch;
  width: 100%;
  display: inline-flex;
  flex-direction: column;
  overflow: hidden;
  gap: map.get($sizes, "md", "gap");

  :where(.moon-accordion-item) {
    &:not(td, tr, colgroup) {
      visibility: visible;
    }

    position: relative;
    display: grid;
    overflow: hidden;
    width: 100%;
    grid-template-rows: max-content 0fr;
    transition: grid-template-rows 0.2s;
    background: map.get($variants, "fill", "background");
    color: map.get($variants, "fill", "color");
    border-radius: map.get($sizes, "md", "radius");
    box-shadow: map.get($variants, "fill", "shadow");
    padding: 0 map.get($sizes, "md", "padding");

    & > input:is([type="checkbox"], [type="radio"]) {
      grid-column-start: 1;
      grid-row-start: 1;
      appearance: none;
      border-color: transparent;
      opacity: 0;
      z-index: 1;
      width: 100%;
      padding: map.get($sizes, "md", "padding") 0;
      padding-inline-end: map.get($sizes, "md", "padding-end");
      min-height: map.get($sizes, "md", "height");
      transition: background-color 0.2s ease-out;
    }

    &:is([open], :focus:not(.moon-accordion-close)),
    &:not(.moon-accordion-close):has(> input:is([type="checkbox"], [type="radio"]):checked) {
      grid-template-rows: max-content 1fr;
    }

    &:is([open], :focus:not(.moon-accordion-close)) > .moon-accordion-item-content,
    &:not(.moon-accordion-close)
      > :where(input:is([type="checkbox"], [type="radio"]):checked ~ .moon-accordion-item-content) {
      visibility: visible;
      min-height: fit-content;
    }

    &:focus-visible,
    &:has(> input:is([type="checkbox"], [type="radio"]):focus-visible) {
      outline: var(--spacing-space-2) solid var(--color-border-info);
    }

    &:not(.moon-accordion-close) {
      & > input[type="checkbox"],
      & > input[type="radio"]:not(:checked),
      & > .moon-accordion-item-header {
        cursor: pointer;
      }
    }

    &:focus:not(.moon-accordion-close, &[open]) > .moon-accordion-item-header {
      cursor: unset;
    }

    &:is([open], :focus:not(.moon-accordion-close)) > :where(.moon-accordion-item-content),
    &:not(.moon-accordion-close)
      > :where(input:is([type="checkbox"], [type="radio"]):checked ~ .moon-accordion-item-content) {
      position: relative;
      padding: map.get($sizes, "md", "padding") 0;
      transition:
        padding 0.2s ease-out,
        background-color 0.2s ease-out;

      &::after {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: var(--spacing-space-1);
        background-color: map.get($variants, "fill", "border");
      }
    }

    &:is([open]) {
      &.moon-accordion-arrow {
        & > .moon-accordion-item-header::after {
          transform: translateY(-50%) rotate(225deg);
        }
      }
    }

    &.moon-accordion-open {
      &.moon-accordion-arrow {
        & > .moon-accordion-item-header::after {
          transform: translateY(-50%) rotate(225deg);
        }
      }
    }

    &.moon-accordion-arrow:focus:not(.moon-accordion-close) {
      & > .moon-accordion-item-header::after {
        transform: translateY(-50%) rotate(225deg);
      }
    }

    &.moon-accordion-arrow:not(.moon-accordion-close) {
      & > input:is([type="checkbox"], [type="radio"]):checked ~ .moon-accordion-item-header::after {
        transform: translateY(-50%) rotate(225deg);
      }
    }

    .moon-accordion-item-header,
    .moon-accordion-item-content {
      grid-column-start: 1;
      grid-row-start: 1;
    }

    .moon-accordion-item-content {
      grid-column-start: 1;
      grid-row-start: 2;
      min-height: 0;
      cursor: unset;
      font: map.get($sizes, "md", "font");
      font-weight: var(--font-weight-default);
      color: map.get($variants, "fill", "color");
      transition:
        visibility 0.2s ease-out,
        padding 0.2s ease-out,
        background-color 0.2s ease-out;
    }

    &:is(details) {
      width: 100%;

      & summary {
        position: relative;
        display: block;
        outline: none;

        &::-webkit-details-marker {
          display: none;
        }
      }
    }

    .moon-accordion-arrow {
      & > .moon-accordion-item-header::after {
        position: absolute;
        display: block;
        height: 0.5rem;
        width: 0.5rem;
        transform: translateY(-100%) rotate(45deg);
        transition-property: all;
        transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
        transition-duration: 0.2s;
        top: 1.9rem;
        inset-inline-end: 1.4rem;
        content: "";
        transform-origin: 75% 75%;
        box-shadow: var(--spacing-space-2) var(--spacing-space-2);
        pointer-events: none;
      }
    }

    .moon-accordion-item-header {
      position: relative;
      width: 100%;
      padding: map.get($sizes, "md", "padding") 0;
      padding-inline-end: map.get($sizes, "md", "padding-end");
      min-height: map.get($sizes, "md", "min-height");
      transition: background-color 0.2s ease-out;
      font: map.get($sizes, "md", "font");
    }

    .moon-accordion-open {
      grid-template-rows: max-content 1fr;

      & > .moon-accordion-item-content {
        position: relative;
        visibility: visible;
        min-height: fit-content;
        padding: map.get($sizes, "md", "padding") 0;
        transition:
          padding 0.2s ease-out,
          background-color 0.2s ease-out;

        &::after {
          content: "";
          position: absolute;
          top: 0;
          left: 0;
          width: 100%;
          height: var(--spacing-space-1);
          background-color: var(--color-border-secondary);
        }
      }
    }
  }

  @each $size, $prop in $sizes {
    @if $size != "md" {
      &.moon-accordion-#{$size} {
        gap: map.get($prop, "gap");

        :where(.moon-accordion-item) {
          border-radius: map.get($prop, "radius");
          padding: 0 map.get($prop, "padding");

          & > input:is([type="checkbox"], [type="radio"]) {
            padding: map.get($prop, "padding") 0;
            padding-inline-end: map.get($prop, "padding-end");
            min-height: map.get($prop, "height");
          }

          &:is([open], :focus:not(.moon-accordion-close)) > :where(.moon-accordion-item-content),
          &:not(.moon-accordion-close)
            > :where(input:is([type="checkbox"], [type="radio"]):checked ~ .moon-accordion-item-content) {
            padding: map.get($prop, "padding") 0;
          }

          .moon-accordion-item-header {
            padding: map.get($prop, "padding") 0;
            padding-inline-end: map.get($prop, "padding-end");
            min-height: map.get($prop, "height");
            font: map.get($prop, "font");
          }

          .moon-accordion-item-content {
            font: map.get($prop, "font");
            font-weight: var(--font-weight-default);
          }

          .moon-accordion-open {
            & > .moon-accordion-item-content {
              padding: map.get($prop, "padding") 0;
            }
          }
        }
      }
    }
  }

  @each $variant, $prop in $variants {
    @if $variant != "md" {
      &.moon-accordion-#{$variant} {
        :where(.moon-accordion-item) {
          background: map.get($prop, "background");
          color: map.get($prop, "color");
          box-shadow: map.get($prop, "shadow");

          &:is([open], :focus:not(.moon-accordion-close)) > :where(.moon-accordion-item-content),
          &:not(.moon-accordion-close)
            > :where(input:is([type="checkbox"], [type="radio"]):checked ~ .moon-accordion-item-content) {
            &::after {
              background-color: map.get($prop, "border");
            }
          }

          .moon-accordion-item-content {
            color: map.get($variants, "fill", "color");
          }
        }
      }
    }
  }
}
