@use "sass:map";
@use "sass:string";
@use "variables";
@use "variants";

@function generate-variant($variant) {
  @return (
    "color": var(--button-#{$variant}-text),
    "background": var(--button-#{$variant}-background),
    "icon": var(--button-#{$variant}-icon),
    "shadow": inset 0 0 0 var(--button-#{$variant}-stroke) var(--button-#{$variant}-border)
  );
}
$variants: ();
@each $variant in variants.$button-variants {
  $variants: map.set($variants, $variant, generate-variant($variant));
}
@function generate-size($size) {
  @return (
    "height": var(--scale-#{$size}-height),
    "padding": var(--scale-#{$size}-padding),
    "gap": var(--scale-#{$size}-gap),
    "radius": var(--utility-button-radius-#{$size}),
    "font": var(--scale-#{$size}-text-weight) var(--scale-#{$size}-text-size) / var(--scale-#{$size}-text-height)
      var(--scale-#{$size}-text-font),
    "icon-size": var(--scale-#{$size}-icon-size)
  );
}
$sizes: ();
@each $size in variants.$button-sizes {
  $sizes: map.set($sizes, $size, generate-size($size));
}

.moon-button {
  position: relative;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  overflow: hidden;
  white-space: nowrap;
  transition:
    opacity 150ms ease-in-out,
    transform 150ms ease-in-out;
  height: map.get($sizes, "md", "height");
  min-width: map.get($sizes, "md", "height");
  padding: 0 map.get($sizes, "md", "padding");
  gap: map.get($sizes, "md", "gap");
  background-color: map.get($variants, "fill", "background");
  border-radius: map.get($sizes, "md", "radius");
  color: map.get($variants, "fill", "color");
  font: map.get($sizes, "md", "font");

  :where(svg, .moon-icon) {
    color: map.get($variants, "fill", "icon");
    width: map.get($sizes, "md", "icon-size");
    height: map.get($sizes, "md", "icon-size");
  }

  &::after {
    content: "";
    position: absolute;
    display: block;
    inset: 0;
    transition: background-color 150ms ease-in-out;
    pointer-events: none;
    background-color: var(--semantic-background-transparent);
  }

  &:disabled,
  &[aria-disabled="true"] {
    cursor: not-allowed;
    opacity: var(--effect-opacity-disabled);
  }

  &:active {
    transform: scale(0.95);
  }

  &:not(:disabled):not([aria-disabled="true"]):hover::after {
    background-color: var(--semantic-background-hover);
  }

  @each $size, $prop in $sizes {
    @if $size != "md" {
      &.moon-button-#{$size} {
        height: map.get($prop, "height");
        min-width: map.get($prop, "width");
        padding: 0 map.get($prop, "padding");
        gap: map.get($prop, "gap");
        border-radius: map.get($prop, "radius");
        font: map.get($prop, "font");

        :where(svg, .moon-icon) {
          width: map.get($prop, "icon-size");
          height: map.get($prop, "icon-size");
        }
      }
    }
  }

  @each $variant, $prop in $variants {
    @if $variant != "fill" {
      &.moon-button-#{$variant} {
        color: map.get($prop, "color");
        background-color: map.get($prop, "background");
        box-shadow: map.get($prop, "shadow");

        :where(svg, .moon-icon) {
          color: map.get($prop, "icon");
        }
      }
    }
  }
}
